olympic_running
data(olympic_running)
data()*
**2** Manipulation d'un objet tsibble
?olympic_running
install.packages("fpp3")
library(tsibble)
?olympic_running
tsibbledata::PBS
tsibbledata::PBS
tsibbledata::olympic_running
?filter
?filter
?select
?index_by
?group_by_key
data = PBS
data = tsibbledata::PBS
data$Type
PBS %>% n_distinct(Type1)
unique(data$Type)
?mutate
PBS
data
yearmonth(3/1999)
yearmonth("3/1999)
yearmonth("3/1999")
yearmonth("3/1999")
yearmonth("03/1999")
yearmonth("31/03/1999")
yearmonth("1999/03/31")
yearmonth("1999/03")
yearquarte("1999/1")
yearquarter("1999/1")
runExample("01_hello")
runExample("01_hello")
library(shiny)
runExample("01_hello")
plot(iris)
library(shiny)
library(shiny)
fluidPage(
titlePanel("Test")
)
ui <- fluidPage(
titlePanel("Test"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "abscisse",
label = "Var en abs",
choices = name(iris),
selected = "Sepal.Length"),
selectInput(inputId = "ordo",
label = "Var en ord",
choices = name(iris),
selected = "Sepal.Length")
)
)
)
shinyApp(ui=ui, server=server)
output$GraphIris <- renderplot({
plot(iris$Sepal.Length,iris$Petal.Length,xlab="Sepal length", ylab = "Petal length")
})}
setwd("C:/Users/mbrei/OneDrive/Bureau/Marathon du web/Marathon_web_G2")
data <- read.csv2(file="Data/Data.csv", dec='.',sep=',')
data
type(data)
data <- data.frame(data)
data
head(data)
summary(data)
data <- read.csv2(file="Data/Data.csv", dec='.',sep=',')
summary(data)
data
library(dplyr)
data2 <- mutate_all(data, ~ifelse(. == "N/A", NA, .))
data2
data <- read.csv2(file="Data/Data.csv", dec='.',sep=',')
data
summary(data)
PCA(data)
library(FactoMineR)
PCA(data)
data[-c(1,2);]
data[-c(1,2),]
data[,-c(1,2)]
#On enlève les deux premières colonnes qui décrivent juste la ville
data_acp <- data[,-c(1,2)]
# Moyenne à la place de NA
data_acp_moy <- data_acp %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
data_acp_moy
PCA(data_acp_moy)
data_acp[,-c(16)]
#Supprimer les lignes qui contiennet les NAs
data_acp_sup <- data_acp[,-c(16)]
#Supprimer les lignes qui contiennet les NAs  (on enlève la dernière colonne qui en contient trop)
data_acp_sup <- na.omit(data_acp[,-c(16)])
data_acp_sup
PCA(data_acp_sup)
plot.PCA(data_acp_moy, choix="var", label="none", habillage="none")
result <- PCA(data_acp_sup)
plot.PCA(result, choix="var", label="none", habillage="none")
prcomp(data_acp_sup, scale. = TRUE)
plot(prcomp(data_acp_sup, scale. = TRUE))
#Pourcentage d'inertie expliqué
barplot(PCA(data_acp_sup))
#On enlève les deux premières colonnes qui décrivent juste la ville
data_acp <- data[,-c(1,2,3,4,5,6,7,8)]
data_acp
# Moyenne à la place de NA
data_acp_moy <- data_acp %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
#On fait l'acp:
PCA(data_acp_moy)
#On enlève les deux premières colonnes qui décrivent juste la ville
data_acp <- data[,-c(12,13,14,15,16,17)]
# Moyenne à la place de NA
data_acp_moy <- data_acp %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
#On fait l'acp:
PCA(data_acp_moy)
#On enlève les deux premières colonnes qui décrivent juste la ville
data_acp <- data[,-c(1,2,12,13,14,15,16,17)]
# Moyenne à la place de NA
data_acp_moy <- data_acp %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
#On fait l'acp:
PCA(data_acp_moy)
#On enlève les deux premières colonnes qui décrivent juste la ville
data_acp <- data[,-c(1,2)]
# Moyenne à la place de NA
data_acp_moy <- data_acp %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
#Supprimer les lignes qui contiennet les NAs  (on enlève la dernière colonne qui en contient trop)
data_acp_sup <- na.omit(data_acp[,-c(16)])
#On fait l'acp:
PCA(data_acp_moy)
PCA(data_acp_sup)
